[
  {
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-l": "workspace::ActivatePaneRight",

      "ctrl-shift-h": "workspace::ToggleLeftDock",
      "ctrl-shift-j": "workspace::ToggleBottomDock",
      "ctrl-shift-l": "workspace::ToggleRightDock",

      "f11": "zed::ToggleFullScreen"
    }
  },
  {
    "context": "Editor && VimControl",
    "bindings": {
      ":": "command_palette::Toggle"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "escape": "editor::Cancel",
      "backspace": "editor::Backspace",
      "delete": "editor::Delete",
      "tab": "editor::Tab"
    }
  },
  {
    "context": "Editor && jupyter && (mode == single_line || mode == auto_height)",
    "bindings": {
      "alt-h": "editor::MoveLeft",
      "alt-l": "editor::MoveRight"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "escape": "editor::Cancel",
      "backspace": "editor::Backspace"
    }
  },
  {
    "context": "VimControl",
    "bindings": {
      "h": "vim::Left",
      "j": "vim::Down",
      "k": "vim::Up",
      "l": "vim::Right",

      "0": ["vim::Number", 0],
      "1": ["vim::Number", 1],
      "2": ["vim::Number", 2],
      "3": ["vim::Number", 3],
      "4": ["vim::Number", 4],
      "5": ["vim::Number", 5],
      "6": ["vim::Number", 6],
      "7": ["vim::Number", 7],
      "8": ["vim::Number", 8],
      "9": ["vim::Number", 9],

      "w": "vim::NextWordStart",
      "b": "vim::PreviousWordStart",
      "e": "vim::NextWordEnd",
      "shift-w": "vim::NextSubwordStart",
      "shift-b": "vim::PreviousSubwordStart",
      "shift-e": "vim::NextSubwordEnd",

      "/": "vim::Search",
      "?": "pane::DeploySearch",

      "g c": "vim::ToggleComments",
      "g r": "editor::Rename",
      "g a": "editor::ToggleCodeActions",
      "g e": "vim::PreviousWordEnd",

      "g d": "editor::GoToDefinition",
      "g shift-d": "editor::GoToDeclaration",
      "g y": "editor::GoToTypeDefinition",
      "g shift-i": "editor::GoToImplementation",

      "g g": "vim::StartOfDocument",
      "shift-g": "vim::EndOfDocument",

      "space w": "workspace::Save",
      "space q": "workspace::CloseWindow",
      "space h": "editor::Fold",
      "space l": "editor::UnfoldLines",
      "space o": "outline::Toggle",
      "space g": "go_to_line::Toggle",
      "space r": "projects::OpenRecent",

      "shift-j": ["workspace::SendKeystrokes", "1 0 j"],
      "shift-k": ["workspace::SendKeystrokes", "1 0 k"]
    }
  },
  {
    "context": "vim_mode == normal",
    "bindings": {
      "i": "vim::InsertBefore",
      "shift-i": "vim::InsertFirstNonWhitespace",
      "a": "vim::InsertAfter",
      "shift-a": "vim::InsertEndOfLine",
      "v": "vim::ToggleVisual",
      "shift-v": "vim::ToggleVisualLine",
      "u": "vim::Undo",
      "ctrl-r": "vim::Redo",
      "y": "vim::PushYank",
      "shift-y": "vim::YankLine",
      "p": "vim::Paste",
      "shift-p": [
        "vim::Paste",
        {
          "before": true
        }
      ],
      "o": "vim::InsertLineBelow",
      "shift-o": "vim::InsertLineAbove",
      "d": "vim::PushDelete",
      "shift-d": "vim::DeleteToEndOfLine",
      "c": "vim::PushChange"
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      "alt-j": "vim::MoveToNextMatch",
      "alt-k": "vim::MoveToPreviousMatch"
    }
  },
  {
    "context": "vim_operator == y || vim_operator == i || vim_operator == cs",
    "bindings": {
      "w": "vim::Word"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      "escape": "vim::SwitchToNormalMode",

      "y": "vim::VisualYank",
      "shift-y": "vim::VisualYank",

      "d": "vim::VisualDelete",
      "shift-d": "vim::VisualDeleteLine",

      "p": [
        "vim::Paste",
        {
          "preserve_clipboard": true
        }
      ],

      "c": "vim::Substitute",
      "shift-c": "vim::SubstituteLine",

      ">": "vim::Indent",
      "<": "vim::Outdent",

      "g c": "vim::ToggleComments"
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "escape": "vim::SwitchToNormalMode",
      "j k": "vim::SwitchToNormalMode",
      "enter": "editor::Newline",
      "alt-f": "editor::ShowCompletions"
    }
  },
  {
    "context": "AssistantPanel && vim_mode == insert",
    "bindings": {
      "enter": "assistant::Assist"
    }
  },
  {
    "context": "vim_mode == insert && !showing_completions",
    "bindings": {
      "alt-h": "editor::MoveLeft",
      "alt-j": "editor::MoveDown",
      "alt-k": "editor::MoveUp",
      "alt-l": "editor::MoveRight"
    }
  },
  {
    "context": "vim_mode == replace",
    "bindings": {
      "escape": "vim::NormalBefore"
    }
  },
  {
    "context": "vim_operator == d",
    "bindings": {
      "d": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_mode == waiting",
    "bindings": {
      "tab": "vim::Tab",
      "enter": "vim::Enter",
      "escape": "vim::ClearOperators"
    }
  },
  {
    "context": "vim_mode == operator",
    "bindings": {
      "escape": "vim::ClearOperators"
    }
  },
  {
    "context": "Editor && renaming",
    "bindings": {
      "enter": "editor::ConfirmRename"
    }
  },
  {
    "context": "AssistantPanel",
    "bindings": {
      "ctrl-t": "assistant::NewChat",
      "ctrl-enter": "assistant::Assist"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "h": "project_panel::CollapseSelectedEntry",
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious",
      "d": "project_panel::Delete",
      "l": "project_panel::OpenPermanent",
      "a f": "project_panel::NewFile",
      "a d": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "y": "project_panel::Copy",
      "p": "project_panel::Paste"
    }
  },
  {
    "context": "BufferSearchBar && !in_replace",
    "bindings": {
      "enter": "vim::SearchSubmit",
      "escape": "buffer_search::Dismiss"
    }
  },
  {
    "context": "menu",
    "bindings": {
      "enter": "menu::Confirm",
      "alt-j": "menu::SelectNext",
      "alt-k": "menu::SelectPrevious"
    }
  },
  // {
  //   "context": "Editor && showing_completions",
  //   "bindings": {
  //     "tab": "editor::ConfirmCompletion",
  //     "enter": "editor::ConfirmCompletion",
  //     "escape": "editor::Cancel"
  //   }
  // },
  {
    "context": "Editor && (edit_prediction_conflict || edit_prediction)",
    "bindings": {
      "alt-h": "editor::PreviousEditPrediction",
      "alt-l": "editor::NextEditPrediction",
      "tab": "editor::AcceptEditPrediction",
      "shift-tab": "editor::AcceptPartialEditPrediction"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-t": "workspace::NewTerminal",
      "alt-j": ["terminal::SendKeystroke", "down"],
      "alt-k": ["terminal::SendKeystroke", "up"],
      "ctrl-shift-c": "terminal::Copy",
      "ctrl-shift-v": "terminal::Paste"
    }
  },
  {
    "context": "Editor && showing_completions",
    "bindings": {
      "alt-j": "editor::ContextMenuNext",
      "alt-k": "editor::ContextMenuPrevious",
      "enter": "editor::ConfirmCompletion",
      "escape": "editor::Cancel"
    }
  },
  {
    "context": "Editor && showing_code_actions",
    "bindings": {
      "alt-j": "editor::ContextMenuNext",
      "alt-k": "editor::ContextMenuPrevious",
      "enter": "editor::ConfirmCodeAction",
      "escape": "editor::Cancel"
    }
  },
  {
    "context": "Pane",
    "bindings": {
      "ctrl-tab": "pane::ActivateNextItem",
      "ctrl-shift-tab": "pane::ActivatePreviousItem",
      "ctrl-w": "pane::CloseActiveItem"
    }
  },
  {
    "context": "Picker",
    "bindings": {
      "alt-k": "menu::SelectPrevious",
      "alt-j": "menu::SelectNext",
      "enter": "menu::Confirm",
      "escape": "menu::Cancel"
    }
  },
  {
    "context": "Editor && vim_mode == visual",
    "bindings": {
      "space i a": [
        "assistant::InlineAssist",
        { "prompt": "Be as brief as possible. " }
      ],

      "space i s": [
        "assistant::InlineAssist",
        { "prompt": "Be as brief as possible. Simplify this code." }
      ],

      "space i f": [
        "assistant::InlineAssist",
        { "prompt": "Be as brief as possible. Fix this code." }
      ],

      "space i r": [
        "assistant::InlineAssist",
        { "prompt": "Be as brief as possible. Reefactor this code." }
      ],

      "space i c": [
        "assistant::InlineAssist",
        { "prompt": "Be as brief as possible. Add comments to this code." }
      ]
    }
  }
]
